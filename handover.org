#+TITLE: Documentation of CSC 301
#+AUTHOR: Nathan Fischer, Andriyan Bilyk, Steffy Lo, Philip Smith, Dragan Soso, Ari Truanovsky, and Edwin Chan
#+OPTIONS: ^:nil

* Technical Structure
** Backend
   - Python using a library called Flask
   - Database is MongoDB

** Frontend
   - React Application (a library available for Node.js)

** Security
   - Passwords are hashed and salted using a tool called bcrypt
     - The password stored in the database contains both the hashed and salted password as well as the salt. Bcrypt knows how to isolate the salt.
     - This is theoretically very hard to reverse so if your database is leaked, it is harder to attack it.
   - Input validation on the data from the frontend is spotty
     - This was mostly something we worked on near the end and as a result we did not fully have enough time to work on it. This means there is a weakness there where an attacker could provide invalid input which ends up in the database.
   - Npm will try to resolve some vulnerabilities. It is unable to fix all of them
   - Some of the Python packages have hardcoded versions. You may wish to update these in the future to prevent vulnerabilities from forming.

* Configuration
  - The configuration for the backend is located at main-project/app/config.py
** Variables and what they do
    - SECRET_KEY :: This is the secret key for the session cookie, an encrypted cookie stored on the browser of the user. If someone knows this key, they can modify their own cookie and authenticate as another user. *Do not show this publicly and edit this after accessing the source code to prevent us from doing malicious things.*
    - STATIC_FOLDER :: Do not change this, this points to the React app so that the Flask server knows where to go to for 'static' HTML files.
    - ENABLE_DEBUG_ROUTES :: When True, this opens up debug routes to the public. *This should be set to False for all production deployments*. When this is set to False, those routes will return a 404 instead (therefore not appearing to be a real route to the general public)
    - DBUSER :: This is the username for the administrator account on the MongoDB instance. *Do not show this publicly and edit this after accessing the source code to prevent us from doing malicious things.*
    - DBPASSWORD :: This is the password for the administrator account on the MongoDB instance. *Do not show this publicly and edit this after accessing the source code to prevent us from doing malicious things.*
    - MONGOURI :: This tells the server where the MongoDB instance is. This should be changed once you determine where your production MongoDB server will be.
    - DATABASE :: This points to the *database* within a MongoDB instance. The idea is Instance -> *database* -> collection (eg. reports, users) -> record

* Deployment
** Requirements
   - You must have several packages installed
     - Node.js and NPM
     - Python
     - Docker
     - Make
     - A shell of your choice (eg. bash)
     - Heroku CLI (optional, only if you are deploying to Heroku)
** Process
   - Assuming that you are running bash, are at the directory that this file is located in, and you are deploying to Heroku, you want to do the following things
   - Edit main-project/Makefile's entry for shipprod. Right now it says the following thing. You will want to change the *bolded areas* to be the same as your *Heroku App Name*


shipprod:

	heroku container:login

	heroku container:push web --app *mcc-prod-301*

	heroku container:release web --app *mcc-prod-301*

   - Afterwards, again assuming that you are in the directory where this file is located, you want to run the following command.

#+BEGIN_SRC sh
cd main-project; make prod
#+END_SRC

   - The first deploy will require a large amount of downloading/uploading. This is because it will download a medium weight Linux image (required for packages like bcrypt which needs gcc) as well as install the Python requirements before uploading.

** Troubleshooting (Common Errors we had while developing)
*** When I browse to the page, it says 404 not found even though it worked before
This is likely due to React not building correctly. Check the build for errors.
*** Container already in use?
Run the following make command to remove the loaded Docker image.

#+BEGIN_SRC sh
make clean
#+END_SRC
